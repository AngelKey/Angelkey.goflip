func (b *testBundle) commitPhase(ctx context.Context, t *testing.T) {
	cp := CommitmentPayload{
		V: Version_V1,
		U: b.leader.ud.U,
		D: b.leader.ud.D,
		C: b.channelID,
		G: b.gameID,
		S: b.start.StartTime,
	}
	for _, p := range b.players {
		commitment, err := p.secret.computeCommitment(cp)
		require.NoError(t, err)
		body := NewGameMessageBodyWithCommitment(commitment)
		b.dealer.InjectChatMessage(ctx, p.ud, newGameMessageEncoded(t, b.md(), body))
	}
}

func (b *testBundle) startPhase(ctx context.Context, t *testing.T) {
	body := NewGameMessageBodyWithStart(b.start)
	b.dealer.InjectChatMessage(ctx, b.leader.ud, newGameMessageEncoded(t, b.md(), body))
}

func (b *testBundle) completeCommit(ctx context.Context, t *testing.T) {
	b.dealer.InjectChatMessage(ctx, b.leader.ud, newGameMessageEncoded(t, b.md(),
		NewGameMessageBodyWithCommitmentComplete(CommitmentComplete{
			Players: b.userDevices(),
		})))
	update := <-b.dealer.UpdateCh()
	require.NotNil(t, update.CC)
	require.Equal(t, b.userDevices(), update.CC.Players)
}

func (b *testBundle) revealPhase(ctx context.Context, t *testing.T) {
	for _, p := range b.players {
		body := NewGameMessageBodyWithReveal(p.secret)
		b.dealer.InjectChatMessage(ctx, p.ud, newGameMessageEncoded(t, b.md(), body))
	}
	update := <-b.dealer.UpdateCh()
	require.NotNil(t, update.Result)
	require.NotNil(t, update.Result.Bool)
}


func happyFollower(t *testing.T, nUsers int) {
	ctx := context.Background()
	b := setupTestBundle(ctx, t, nUsers, false)
	b.run(ctx)
	defer b.stop()

	b.startPhase(ctx, t)
	b.commitPhase(ctx, t)
	b.completeCommit(ctx, t)
	b.revealPhase(ctx, t)
}

func TestDroppedReveal(t *testing.T) {
	ctx := context.Background()
	b := setupTestBundle(ctx, t, 3, false)
	b.run(ctx)
	defer b.stop()

	b.startPhase(ctx, t)
	b.commitPhase(ctx, t)
	b.completeCommit(ctx, t)

	for _, p := range b.players[0 : len(b.players)-1] {
		body := NewGameMessageBodyWithReveal(p.secret)
		b.dealer.InjectChatMessage(ctx, p.ud, newGameMessageEncoded(t, b.md(), body))
	}
	b.dh.clock.Advance(time.Duration(13) * time.Second)
	update := <-b.dealer.UpdateCh()
	fmt.Printf("%+v\n", update)
}
func TestCoinflipHappyPath3(t *testing.T)  { happyFollower(t, 3) }
func TestCoinflipHappyPath10(t *testing.T) { happyFollower(t, 10) }

func (b testBundle) userDevices() []UserDevice {
	var ret []UserDevice
	for _, p := range b.players {
		ret = append(ret, p.ud)
	}
	return ret
}
