
@namespace("flip")

protocol flip {

  // Time in milliseconds since the epoch
  @typedef("long")
  record Time {}

  @typedef("bytes")
  record GameID {}

  @typedef("bytes")
  record UID {}

  @typedef("bytes")
  record DeviceID {}

  record Start {
    Time startTime;
    Time commitmentEndTime;
    // How long the reveal period lasts
    long revealPeriodMsec;
    FlipParameters params;
  }

  record UserDevice {
    UID u;
    DeviceID d;
  }

  record CommitmentComplete {
    array<UserDevice> players;
    Time revealEndTime;
  }

  enum FlipType {
    INTS_1,
    SHUFFLE_2
  }

  enum IntType {
    FIXED_1,
    BIG_2,
    BOOL_3
  }

  variant FlipParametersInt switch (IntType t) {
    case BIG: bytes;
    case FIXED: long;
    case BOOL: void;
  }

  variant FlipParameters switch (FlipType t) {
    case INTS: array<FlipParametersInt>;
    case SHUFFLE: long;
  }

  enum MessageType {
    START_1,
    COMMITMENT_2,
    COMMITMENT_COMPLETE_3,
    REVEAL_4
  }

  enum Stage {
    ROUND1_1,
    ROUND2_2
  }

  fixed Secret(32);
  fixed Commitment(32);

  record CommitmentPayload {
    Version v;
    UserDevice u;
    GameID i;
    Time s;
  }

  variant GameMessageBody switch (MessageType t) {
    case START: Start;
    case COMMITMENT: Commitment;
    case COMMITMENT_COMPLETE: CommitmentComplete;
    case REVEAL: Secret;
  }

  enum Version {
     V1_1
  }

  variant GameMessage switch (Version v) {
    case V1: GameMessageV1;
    default: void;
  }

  record GameMessageV1 {
    GameID gameID;
    GameMessageBody body;
  }

}