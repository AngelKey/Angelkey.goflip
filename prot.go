// Auto-generated by avdl-compiler v1.3.29 (https://github.com/keybase/node-avdl-compiler)
//   Input file: prot.avdl

package flip

import (
	"errors"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
)

type Stage int

const (
	Stage_REGISTRATION Stage = 1
	Stage_COMMITMENT   Stage = 2
	Stage_REVEAL       Stage = 3
)

func (o Stage) DeepCopy() Stage { return o }

var StageMap = map[string]Stage{
	"REGISTRATION": 1,
	"COMMITMENT":   2,
	"REVEAL":       3,
}

var StageRevMap = map[Stage]string{
	1: "REGISTRATION",
	2: "COMMITMENT",
	3: "REVEAL",
}

func (e Stage) String() string {
	if v, ok := StageRevMap[e]; ok {
		return v
	}
	return ""
}

type Secret [32]byte

func (o Secret) DeepCopy() Secret {
	var ret Secret
	copy(ret[:], o[:])
	return ret
}

type InputMessage struct {
	S__          Stage   `codec:"s" json:"s"`
	Commitment__ *Secret `codec:"commitment,omitempty" json:"commitment,omitempty"`
	Reveal__     *Secret `codec:"reveal,omitempty" json:"reveal,omitempty"`
}

func (o *InputMessage) S() (ret Stage, err error) {
	switch o.S__ {
	case Stage_COMMITMENT:
		if o.Commitment__ == nil {
			err = errors.New("unexpected nil value for Commitment__")
			return ret, err
		}
	case Stage_REVEAL:
		if o.Reveal__ == nil {
			err = errors.New("unexpected nil value for Reveal__")
			return ret, err
		}
	}
	return o.S__, nil
}

func (o InputMessage) Commitment() (res Secret) {
	if o.S__ != Stage_COMMITMENT {
		panic("wrong case accessed")
	}
	if o.Commitment__ == nil {
		return
	}
	return *o.Commitment__
}

func (o InputMessage) Reveal() (res Secret) {
	if o.S__ != Stage_REVEAL {
		panic("wrong case accessed")
	}
	if o.Reveal__ == nil {
		return
	}
	return *o.Reveal__
}

func NewInputMessageWithCommitment(v Secret) InputMessage {
	return InputMessage{
		S__:          Stage_COMMITMENT,
		Commitment__: &v,
	}
}

func NewInputMessageWithReveal(v Secret) InputMessage {
	return InputMessage{
		S__:      Stage_REVEAL,
		Reveal__: &v,
	}
}

func (o InputMessage) DeepCopy() InputMessage {
	return InputMessage{
		S__: o.S__.DeepCopy(),
		Commitment__: (func(x *Secret) *Secret {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.Commitment__),
		Reveal__: (func(x *Secret) *Secret {
			if x == nil {
				return nil
			}
			tmp := (*x).DeepCopy()
			return &tmp
		})(o.Reveal__),
	}
}

type FlipInterface interface {
}

func FlipProtocol(i FlipInterface) rpc.Protocol {
	return rpc.Protocol{
		Name:    "flip.flip",
		Methods: map[string]rpc.ServeHandlerDescription{},
	}
}

type FlipClient struct {
	Cli rpc.GenericClient
}
